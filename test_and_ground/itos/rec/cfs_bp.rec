/* 
Author: JP Swinski
Date:   9/5/19
*/

prototype System BundleProtocol {

  /* ------------------- */
  /* COMMAND DEFINITIONS */
  /* ------------------- */

  prototype CfsCommand BPCommand {
    secondary     { range=1 }
    applicationId { range=0xAF }
  }

  Enumeration BP_PollState
  {
    EnumerationValue Disable { value = 0 }
    EnumerationValue Enable  { value = 1 }
  }

  /**--> Bundle Protocol (BP) Application Command: No Operation */
  BPCommand NoOp {
    commandCode { range=0 }
  }

  /**--> Bundle Protocol (BP) Application Command: Reset Counters */
  BPCommand ResetCntrs {
    commandCode { range=1 }
  }
  
  /**--> Bundle Protocol (BP) Application Command: Reload Flow Table */
  BPCommand ReloadTable {
    commandCode { range=2 }
  }  
  
  /**--> Bundle Protocol (BP) Application Command: Enable Flow */
  BPCommand EnableFlow {
    commandCode { range=3 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }  
  }
  
  /**--> Bundle Protocol (BP) Application Command: Disable Flow */
  BPCommand DisableFlow {
    commandCode { range=4 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }  
  }

  /**--> Bundle Protocol (BP) Application Command: Flush Flow */
  BPCommand FlushFlow {
    commandCode { range=5 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }
  }

  /**--> Bundle Protocol (BP) Application Command: Pause Flow */
  BPCommand PauseFlow {
    commandCode { range=6 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }
  }

  /**--> Bundle Protocol (BP) Application Command: Resume Flow */
  BPCommand ResumeFlow {
    commandCode { range=7 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }
  }

  /**--> Bundle Protocol (BP) Application Command: Override Time */
  BPCommand OverrideTimeout {
    commandCode     { range=8 }
    cfs.S8 Flow     { lengthInCharacters=8 defaultValue="HKT" }
    cfs.U32 Timeout { }
  }

  /**--> Bundle Protocol (BP) Application Command: Disable Override Timeout */
  BPCommand DisableOverrideTimeout {
    commandCode { range=9 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }
  }

  /**--> Bundle Protocol (BP) Application Command: Override Priority */
  BPCommand OverridePriority {
    commandCode         { range=10 }
    cfs.S8 Flow         { lengthInCharacters=8 defaultValue="HKT" }
    cfs.U16 Priority    { }
  }

  /**--> Bundle Protocol (BP) Application Command: Disable Override Priority */
  BPCommand DisableOverridePriority {
    commandCode { range=11 }
    cfs.S8 Flow { lengthInCharacters=8 defaultValue="HKT" }
  }

  /* --------------------- */
  /* TELEMETRY DEFINITIONS */
  /* --------------------- */

  DiscreteConversion flowstate {
    Dsc DISABLED { range=0..0 bgColor=black fgColor=red }
    Dsc ENABLED  { range=1..1 bgColor=black fgColor=green }
  }

  DiscreteConversion flowactivity {
    Dsc PAUSED { range=0..0 bgColor=black fgColor=yellow }
    Dsc ACTIVE { range=1..1 bgColor=black fgColor=green }
    Dsc NA     { range=-1..-1 bgColor=black fgColor=yellow }
  }

  DiscreteConversion flowhealth {
    Dsc ERROR   { range=0..0 bgColor=black fgColor=red }
    Dsc HEALTHY { range=1..1 bgColor=black fgColor=green }
    Dsc NA      { range=-1..-1 bgColor=black fgColor=yellow }
  }

  DiscreteConversion flagstate {
    Dsc CLEAR { range=0..0 bgColor=black fgColor=green }
    Dsc SET   { range=1..1 bgColor=black fgColor=yellow }
  }

  prototype CfsTelemetryPacket FlowTelemetryPacket {
    applyWhen = { FieldInRange { field=applicationId, range=0xB0 } }
    
    cfs.S8 Name                     { lengthInCharacters=8 }        /**<-- name of the bundle flow - used for commanding */
    cfs.U32 NameHiHex               { offset={-8,0} }
    cfs.U32 NameLoHex               { }

    cfs.U8 Enabled                  { conversion=flowstate }        /**<-- state of bundle flow - enabled/disabled */
    cfs.I8 Active                   { conversion=flowactivity }     /**<-- state of enabled bundle flow - paused/active */ 

    cfs.U16 DataInDropped           { }                             /**<-- number of bundled payloads dropped by BP application */ 
    cfs.U16 DataOutDropped          { }                             /**<-- number of unbundled payloads dropped by BP application */ 
    cfs.U16 Spare0                  { }

    cfs.U32 LibFlags                { }                             /**<-- bplib bundle processing flags */
    cfs.U32 LibFlagsUnused          { offset={-4,0}, lengthInBits=13 }
    cfs.U32 LibFlagFailedToParse    { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibInvalidTargetType    { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibInvalidResultType    { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibInvalidCipherSuite   { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagUnknownRec       { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagCustodyFull      { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagDuplicates       { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagActiveTableWrap  { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagSdnvIncomplete   { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagSdnvOverflow     { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagUnknownCid       { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagStoreFailure     { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagRouteNeeded      { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagBundleTooLarge   { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagFailedIntegrity  { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagDropped          { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagUnreliableTime   { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagIncomplete       { lengthInBits=1 conversion=flagstate }
    cfs.U32 LibFlagNoncompliant     { lengthInBits=1 conversion=flagstate }

    cfs.U32 Timeout                 { }                             /**<-- bundle timeout */
    cfs.I32 Priority                { }                             /**<-- flow priority */

    cfs.I8 IOSendHealthy            { conversion=flowhealth }       /**<-- I/O layer bundle send health */ 
    cfs.I8 IOReceiveHealthy         { conversion=flowhealth }       /**<-- I/O layer bundle receive health */
    cfs.U16 IOSendNotReady          { }                             /**<-- number of times bundle ready but IO not able to accept */ 
    cfs.U32 IOBytesSentPerSecond    { }                             /**<-- rate of bytes sent by IO module */
    cfs.U32 IOBytesReceivedPerSecond{ }                             /**<-- rate of bytes received by IO module */

    cfs.U32 LibLost                 { }                             /**<-- number of bundles lost by bplib */
    cfs.U32 LibExpired              { }                             /**<-- number of bundles expired by bplib */
    cfs.U32 LibUnrecognized         { }                             /**<-- number of bundles unrecognized by bplib */
    cfs.U32 LibTransmittedBundles   { }                             /**<-- number of new bundles transmitted by bplib */
    cfs.U32 LibTransmittedDacs      { }                             /**<-- number of dacs transmitted by bplib */
    cfs.U32 LibRetransmittedBundles { }                             /**<-- number of bundles retransmitted by bplib (counts each timeout) */
    cfs.U32 LibDeliveredPayloads    { }                             /**<-- number of payloads unbundled by bplib */
    cfs.U32 LibReceivedBundles      { }                             /**<-- number of bundles received by bplib */
    cfs.U32 LibForwardedBundles     { }                             /**<-- number of bundles forwaded by bplib */
    cfs.U32 LibReceivedDacs         { }                             /**<-- number of dacs received by bplib */
    cfs.U32 LibStoredBundles        { }                             /**<-- number of bundles currently in the storage service */
    cfs.U32 LibStoredPayloads       { }                             /**<-- number of payloads currently in the storage service */
    cfs.U32 LibStoredDacs           { }                             /**<-- number of dacs currently in the storage service */
    cfs.U32 LibAcknowledgedBundles  { }                             /**<-- number of bundles acknowledged by bplib */
    cfs.U32 LibActiveBundles        { }                             /**<-- number of unexpired bundles sent but unacknowledged */
  }

  /**--> Bundle Protocol (BP) Application Telemetry Packet: Housekeeping */
  CfsTelemetryPacket HK {
    applyWhen = { FieldInRange { field=applicationId, range=0xAF } }

    cfs.U16 CmdPc                   { }                                         /**<-- BP command accepted counter */
    cfs.U16 CmdEc                   { }                                         /**<-- BP command error counter */

    cfs.U32 EnabledFlowsMask        { }                                         /**<-- BP flow enable mask */
    cfs.U32 EnableMaskUnused        { offset={-4,0}, lengthInBits=30 }          /**<-- Unused bits in mask */
    cfs.U32 AuxFlow                 { lengthInBits=1 conversion=flowstate }     /**<-- BP event bundle flow */
    cfs.U32 HktFlow                 { lengthInBits=1 conversion=flowstate }     /**<-- BP housekeeping bundle flow */

    cfs.U32 MemInUse                { }
    cfs.U32 MemHighWater            { }

    cfs.U32 NumFreeFlashBlocks      { }
    cfs.U32 NumUsedFlashBlocks      { }
    cfs.U32 NumBadFlashBlocks       { }
    cfs.U32 FlashErrorCount         { }

    cfs.U16 FilesPending            { }
    cfs.U16 FilesProcessed          { }
    cfs.U16 FilesDropped            { }
    cfs.U16 Spare0                  { }

    cfs.U32 FlashSingleBitErrors    { }
    cfs.U32 FlashMultipleBitErrors  { }
    cfs.U32 FlashReadRetries        { }
    cfs.U32 FlashWriteRetries       { }
    cfs.U32 FlashEraseRetries       { }
    cfs.U32 FlashLastRetriedBlock   { }
  }
  
  /**--> Bundle Protocol (BP) Application Telemetry Packet: Generic Flow Housekeeping */
  FlowTelemetryPacket FlowPkt {}

  /**--> Bundle Protocol (BP) Application Telemetry Packet: HKT Flow Housekeeping */
  FlowTelemetryPacket FlowHKT {
    applyWhen += { FieldInRange { field=NameHiHex, range=0x484B5400 } } /* { 'H', 'K', 'T', '\0' } */
  }

  /**--> Bundle Protocol (BP) Application Telemetry Packet: AUX Flow Housekeeping */
  FlowTelemetryPacket FlowAUX {
    applyWhen += { FieldInRange { field=NameHiHex, range=0x41555800 } } /* { 'A', 'U', 'X', '\0' } */
  }
  
  /* ----------------- */
  /* TABLE DEFINITIONS */
  /* ----------------- */

  System cnv {
    DiscreteConversion Enabled {
        Dsc False  { range=0, fgColor=white, bgColor=black }
        Dsc True   { range=1, fgColor=white, bgColor=black }
    }
  }

  System table {
    System sources {
      TelemetrySource bp_flowtable {}          
    }

    prototype  Structure PktTblEntry {
      cfs.U16 StreamId    {}          
      cfs.U8  Priority    {} /* software bus quality of service */ 
      cfs.U8  Reliability {}          
      cfs.U16 BuffLim     {}          
    }

    prototype Structure FlowTableEntry {
      cfs.S8  Name       { lengthInCharacters=8 }
      cfs.U8  Enabled    { conversion=cnv.Enabled }
      cfs.U8  Spare1     {} /* pad */
      cfs.U16 SrcServ    {}
      cfs.U32 DstNode    {}
      cfs.U16 DstServ    {}
      cfs.U16 Spare2     {} /* pad */
      cfs.U32 Timeout    {}
      cfs.U32 Lifetime   {}
      cfs.U16 Priority   {} /* bundle protocol class of service */
      cfs.U16 Spare3     {} /* pad */
      cfs.U32 MaxActive  {}
      cfs.S8  Store      { lengthInCharacters=8 }
      PktTblEntry PktTbl[64] {}
      cfs.U16 PipeDepth  {}  
      cfs.S8  IOParm     { lengthInCharacters=128 }
      cfs.U16 Spare4     {} /* pad */
    }
    
    /** Flow Table */
    cfs.Table FlowTable {
      source=sources.bp_flowtable
      FlowTableEntry Flow[2] {}
    }
  }
}
